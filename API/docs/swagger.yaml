openapi: 3.0.3
info:
  title: Project Management API
  description: API documentation for user, project, environment and PAT management.
  version: 1.0.0

servers:
  - url: http://localhost:8000/api/v1

tags:
  - name: User
    description: User management and authentication
  - name: Project
    description: Project management
  - name: Environment
    description: Environment management
  - name: PAT
    description: Personal Access Token management
  - name: Permissions
    description: User permissions management
  - name: Core
    description: Core/Workflow and system operations

components:
  securitySchemes:
    CookieAuth:
      type: apiKey
      in: cookie
      name: accessToken

  responses:
    UnauthorizedError:
      description: Authentication required or invalid token
    ForbiddenError:
      description: Permission denied
    NotFoundError:
      description: Resource not found
    ServerError:
      description: Internal server error

  schemas:
    Project:
      type: object
      properties:
        projectId:
          type: string
        name:
          type: string
        description:
          type: string
    Environment:
      type: object
      properties:
        environmentNumber:
          type: integer
        name:
          type: string
        dockerImage:
          type: string
    User:
      type: object
      properties:
        userId:
          type: string
        email:
          type: string
        name:
          type: string

security:
  - CookieAuth: []

paths:
  ############################
  # User Routes
  ############################
  /users/createRootAdmin:
    post:
      summary: Create the root admin
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username: { type: string }
                email: { type: string }
                fullname: { type: string }
                password: { type: string }
      responses:
        "200": { description: Root admin created }
        "400": { $ref: "#/components/responses/ServerError" }

  /users/register:
    post:
      summary: Register a new user
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username: { type: string }
                email: { type: string }
                fullname: { type: string }
                password: { type: string }
                permissions:
                  type: array
                  items: { type: string }
      responses:
        "200": { description: User registered }
        "400": { $ref: "#/components/responses/ServerError" }

  /users/login:
    post:
      summary: Login user
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                username: { type: string }
                password: { type: string }
      responses:
        "200": { description: Logged in successfully }
        "400": { $ref: "#/components/responses/ServerError" }

  /users/logout:
    get:
      summary: Logout user
      tags: [User]
      responses:
        "200": { description: Logged out }

  /users/currentUser:
    get:
      summary: Get current user
      tags: [User]
      responses:
        "200": { description: Current user details }

  /users/allUsers:
    get:
      summary: Get all users
      tags: [User]
      responses:
        "200": { description: List of users }

  /users/reclaimTokens:
    get:
      summary: Refresh and reclaim tokens
      tags: [User]
      responses:
        "200": { description: Tokens refreshed }

  /users/updateUserDetails:
    patch:
      summary: Update user details
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullname: { type: string }
                username: { type: string }
                email: { type: string }
      responses:
        "200": { description: User updated }

  /users/changePassword:
    patch:
      summary: Change user password
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword: { type: string }
                newPassword: { type: string }
      responses:
        "200": { description: Password changed }

  /users/deleteUser:
    delete:
      summary: Delete a user
      tags: [User]
      responses:
        "200": { description: User deleted }

  /users/getPermission:
    get:
      summary: Show available permissions
      tags: [Permissions]
      responses:
        "200": { description: List of permissions }

  /users/addPermission:
    post:
      summary: Add a permission to a user
      tags: [Permissions]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId: { type: string }
                newPermissions:
                  type: array
                  items: { type: string }
      responses:
        "200": { description: Permission added }

  /users/removePermission:
    post:
      summary: Remove a permission from a user
      tags: [Permissions]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId: { type: string }
                permissionsToRemove:
                  type: array
                  items: { type: string }
      responses:
        "200": { description: Permission removed }

  ############################
  # Project Routes
  ############################
  /project/createProject:
    post:
      summary: Create a new project
      tags: [Project]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                dockerImage: { type: string }
                poolInterval: { type: number }
                imageType: { type: string }
                dockerhubPAT: { type: string }
                dockerhubUsername: { type: string }
      responses:
        "200": { description: Project created }

  /project/enterProject/{projectId}:
    get:
      summary: Enter a project
      tags: [Project]
      parameters:
        - name: projectId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200": { description: Project entered }

  /project/exitProject:
    get:
      summary: Exit current project
      tags: [Project]
      responses:
        "200": { description: Project exited }

  /project/updateProject:
    patch:
      summary: Update a project
      tags: [Project]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                dockerImage: { type: string }
                poolInterval: { type: number }
                imageType: { type: string }
                githubUsername: { type: string }
                githubPAT: { type: string }
                dockerhubPAT: { type: string }
                dockerhubUsername: { type: string }
      responses:
        "200": { description: Project updated }

  /project/deleteProject:
    delete:
      summary: Delete a project
      tags: [Project]
      responses:
        "200": { description: Project deleted }

  /project/getCurrentProjectDetails:
    get:
      summary: Get details of current project
      tags: [Project]
      responses:
        "200": { description: Current project details }

  /project/getAllProjects:
    get:
      summary: Get all projects
      tags: [Project]
      responses:
        "200": { description: List of projects }

  ############################
  # Environment Routes
  ############################
  /environment/createEnvironment:
    post:
      summary: Create environment in a project
      tags: [Environment]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                environmentName: { type: string }
                gitRepo: { type: string }
                helmValuePath: { type: string }
                mode: { type: string }
                branch: { type: string }
      responses:
        "200": { description: Environment created }

  /environment/getEnvironment/{projectId}/{environmentNumber}:
    get:
      summary: Get environment by projectId + number
      tags: [Environment]
      parameters:
        - name: projectId
          in: path
          required: true
          schema: { type: string }
        - name: environmentNumber
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200": { description: Environment details }

  /environment/updateEnvironment/{environmentId}:
    patch:
      summary: Update an environment
      tags: [Environment]
      parameters:
        - name: environmentId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                environmentName: { type: string }
                gitRepo: { type: string }
                helmValuePath: { type: string }
                mode: { type: string }
                branch: { type: string }
      responses:
        "200": { description: Environment updated }

  /environment/getAllEnvironment:
    get:
      summary: Get all environments in current project
      tags: [Environment]
      responses:
        "200": { description: List of environments }

  /environment/deleteEnvironment/{environmentId}:
    delete:
      summary: Delete environment
      tags: [Environment]
      parameters:
        - name: environmentId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200": { description: Environment deleted }

  ############################
  # PAT Routes
  ############################
  /pat/addGithubPAT:
    post:
      summary: Add a GitHub PAT
      tags: [PAT]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nameOfPAT: { type: string }
                githubUsername: { type: string }
                githubPAT: { type: string }
      responses:
        "200": { description: PAT added }

  /pat/showPATProjects:
    get:
      summary: Show projects linked to PAT
      tags: [PAT]
      parameters:
        - name: patId
          in: query
          required: true
          schema: { type: string }
      responses:
        "200": { description: List of PAT projects }

  /pat/addPATinProject:
    post:
      summary: Add PAT to a project
      tags: [PAT]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nameOfPAT: { type: string }
      responses:
        "200": { description: PAT linked to project }

  /pat/deletePAT:
    delete:
      summary: Delete a GitHub PAT
      tags: [PAT]
      parameters:
        - name: patId
          in: query
          required: true
          schema: { type: string }
      responses:
        "200": { description: PAT deleted }

  ############################
  # Core/Workflow Routes
  ############################
  /callCore/startWorkflow:
    get:
      summary: Start workflow for project
      tags: [Core]
      responses:
        "200": { description: Workflow started }

  /callCore/stopWorkflow:
    get:
      summary: Stop workflow for project
      tags: [Core]
      responses:
        "200": { description: Workflow stopped }

  /callCore/logs/workflow:
    get:
      summary: Stream workflow logs
      tags: [Core]
      responses:
        "200": { description: Workflow logs stream }

  /callCore/logs/watcher:
    get:
      summary: Stream watcher logs
      tags: [Core]
      responses:
        "200": { description: Watcher logs stream }

  /callCore/logs/patcher/{envId}:
    get:
      summary: Stream patcher logs for environment
      tags: [Core]
      parameters:
        - name: envId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200": { description: Patcher logs stream }

  /callCore/logsCleaner:
    get:
      summary: Enable log cleaner
      tags: [Core]
      responses:
        "200": { description: Log cleaner enabled }

  /callCore/startManualPatcher/{environmentId}:
    get:
      summary: Start manual patcher for environment
      tags: [Core]
      parameters:
        - name: environmentId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200": { description: Manual patcher started }